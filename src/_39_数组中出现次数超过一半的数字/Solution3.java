package _39_数组中出现次数超过一半的数字;

public class Solution3 {
	/**
	 * 力扣Krahets最佳题解思路：
	 * 【摩尔投票法】【时间O(N):1ms 空间0(1)】
	 * main base：1.[众数]出现的次数>[非众数的所有数]的出现次数 2.每次出现众数，票数和sum+1；否则票数和-1
	 * 由1&2――>3.所以就算每一次抵消都是正确的用众数去抵消，那也应该众数的票数>0
	 * [更不要说如果非众数和非众数进行了抵消，那最后剩的众数票数更多了！]
	 * 
	 * details：（假设数组第一个数是众数，如果第二个数=第一个数，则计数+1；如果不等于，则-1；每次抹0，都需要把下一个num假设为新的众数！
	 * 能撑到遍历完成时票数和sum依旧>0的假设众数，即为真正的众数！）
	 */
	public int majorityElement(int[] nums) {
		int res = -1;//众数
		int sum = 0;//统计票数[每次票数归0都要把下一个num假设为新的众数！]
		for(int num:nums) {
			if(sum==0) {
				res = num;//每次票数和归0，重设众数！
				sum += 1;
			}
			else {
				//如果sum非0，则需要判断本轮的num和当前假设的众数res的关系
				sum += (num==res)?1:-1;
			}
		}
		return res;
	}
}
